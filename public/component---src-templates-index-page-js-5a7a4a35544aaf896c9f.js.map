{"version":3,"sources":["webpack:///./src/components/Content.js","webpack:///./src/templates/index-page.js","webpack:///./src/components/BlogRoll.js"],"names":["HTMLContent","content","className","dangerouslySetInnerHTML","__html","Content","IndexPageTemplate","image","title","heading","subheading","mainpitch","description","PageContent","contentComponent","style","backgroundImage","childImageSharp","fluid","src","display","height","lineHeight","justifyContent","alignItems","flexDirection","boxShadow","backgroundColor","color","padding","to","IndexPage","post","data","markdownRemark","frontmatter","intro","html","pageQuery","BlogRoll","render","posts","this","props","allMarkdownRemark","edges","map","node","key","id","featuredpost","featuredimage","imageInfo","alt","fields","slug","excerpt","React","Component","query","count"],"mappings":"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","file":"component---src-templates-index-page-js-5a7a4a35544aaf896c9f.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\n\nContent.propTypes = {\n  content: PropTypes.node,\n  className: PropTypes.string,\n}\n\nHTMLContent.propTypes = Content.propTypes\n\nexport default Content\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport BlogRoll from '../components/BlogRoll'\nimport Content, { HTMLContent } from '../components/Content'\n\nexport const IndexPageTemplate = ({\n  image,\n  title,\n  heading,\n  subheading,\n  mainpitch,\n  description,\n  content, \n  contentComponent\n}) => {\n  const PageContent = contentComponent || Content\n\n  return (\n\n  <div>\n    <div\n      className=\"full-width-image-container margin-top-0\"\n      style={{\n        backgroundImage: `url(${\n          !!image.childImageSharp ? image.childImageSharp.fluid.src : image\n        })`,\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          height: '150px',\n          lineHeight: '1',\n          justifyContent: 'space-around',\n          alignItems: 'left',\n          flexDirection: 'column',\n        }}\n      >\n      <h2\n        className=\"has-text-weight-bold is-size-1\"\n        style={{\n          boxShadow: '0.5rem 0 0 #134d72, -0.5rem 0 0 #134d72',\n          backgroundColor: '#134d72',\n          color: 'white',\n          padding: '1rem',\n        }}\n      >\n        {title}\n      </h2>\n        <h3\n          className=\"has-text-weight-bold is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\n          style={{\n            boxShadow:\n              '#134d72 0.5rem 0px 0px, #134d72 -0.5rem 0px 0px',\n            backgroundColor: '#134d72',\n            color: 'white',\n            lineHeight: '1',\n            padding: '0.25em',\n          }}\n        >\n          {subheading}\n        </h3>\n      </div>\n    </div>\n    <section className=\"section section--gradient\">\n      <div className=\"container\">\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"content\">\n                <div className=\"content\">\n                  <div className=\"tile\">\n                    <h1 className=\"title\">{mainpitch.title}</h1>\n                  </div>\n                  <div className=\"tile\">\n                    <h3 className=\"subtitle\">{mainpitch.description}</h3>\n                  </div>\n                </div>\n                <div className=\"columns\">\n                  <div className=\"column is-12\">\n                    <h3 className=\"has-text-weight-semibold is-size-2\">\n                      {heading}\n                    </h3>\n                    <p>{description}</p>\n                  </div>\n                </div>\n                <div className=\"columns\">\n                  <div className=\"column is-10\">\n                    <div className=\"section\">\n                      <PageContent className=\"content\" content={content} />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"column is-12\">\n                  <h3 className=\"has-text-weight-semibold is-size-2\">\n                  News and Announcements\n                  </h3>\n                  <BlogRoll />\n                  <div className=\"column is-12 has-text-centered\">\n                    <Link className=\"btn\" to=\"/blog\">\n                      Read more\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n )\n}\n\nIndexPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  heading: PropTypes.string,\n  subheading: PropTypes.string,\n  mainpitch: PropTypes.object,\n  description: PropTypes.string,\n  content: PropTypes.string,\n  contentComponent: PropTypes.func,  \n}\n\nconst IndexPage = ({ data }) => {\n  const { markdownRemark: post } = data\n\n  return (\n    <Layout>\n      <IndexPageTemplate\n        contentComponent={HTMLContent}\n        image={post.frontmatter.image}\n        title={post.frontmatter.title}\n        heading={post.frontmatter.heading}\n        subheading={post.frontmatter.subheading}\n        mainpitch={post.frontmatter.mainpitch}\n        description={post.frontmatter.description}\n        intro={post.frontmatter.intro}\n        content={post.html}\n      />\n    </Layout>\n  )\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\n      html\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            fluid(maxWidth: 2048, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        heading\n        subheading\n        mainpitch {\n          title\n          description\n        }\n        description\n\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, StaticQuery } from 'gatsby'\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\n\nclass BlogRoll extends React.Component {\n  render() {\n    const { data } = this.props\n    const { edges: posts } = data.allMarkdownRemark\n\n    return (\n      <div className=\"columns is-multiline\">\n        {posts &&\n          posts.map(({ node: post }) => (\n            <div className=\"is-parent column is-6\" key={post.id}>\n              <article\n                className={`blog-list-item tile is-child box notification ${\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\n                }`}\n              >\n                <header>\n                  {post.frontmatter.featuredimage ? (\n                    <div className=\"featured-thumbnail\">\n                      <PreviewCompatibleImage\n                        imageInfo={{\n                          image: post.frontmatter.featuredimage,\n                          alt: `featured image thumbnail for post ${post.frontmatter.title}`,\n                        }}\n                      />\n                    </div>\n                  ) : null}\n                  <p className=\"post-meta\">\n                    <Link\n                      className=\"title has-text-primary is-size-4\"\n                      to={post.fields.slug}\n                    >\n                      {post.frontmatter.title}\n                    </Link>\n                  </p>\n                </header>\n                <p>\n                  {post.excerpt}\n                  <br />\n                  <br />\n                  <Link className=\"button\" to={post.fields.slug}>\n                    Keep Reading →\n                  </Link>\n                </p>\n              </article>\n            </div>\n          ))}\n      </div>\n    )\n  }\n}\n\nBlogRoll.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array,\n    }),\n  }),\n}\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query BlogRollQuery {\n        allMarkdownRemark(\n          sort: { order: DESC, fields: [frontmatter___date] }\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\n        ) {\n          edges {\n            node {\n              excerpt(pruneLength: 100)\n              id\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n                templateKey\n                date(formatString: \"MMMM DD, YYYY\")\n                featuredpost\n                featuredimage {\n                  childImageSharp {\n                    fluid(maxWidth: 120, quality: 100) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(data, count) => <BlogRoll data={data} count={count} />}\n  />\n)\n"],"sourceRoot":""}